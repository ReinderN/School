/* Create-script voor BoekenClub
   Firebird 3, RelSQL-versie 29-maa-2021
*/

create domain Naam      as varchar(30);
create domain Geslacht  as char(1)  check(value in ('M', 'V'));
create domain Auteurnr  as integer;
create domain Boeknr    as integer;
create domain Boektitel as varchar(50);
create domain Bedrag    as numeric(6,2) check(value >= 0);
create domain Genrecode as integer;
create domain Genreomschrijving  as varchar(30);
create domain Datum     as date;
create domain Lidnr     as integer;
create domain Bestelnr  as integer;
create domain Volgnr    as integer;
create domain Aantal    as integer check(value >= 0);

create table Auteur
(nr         Auteurnr       not null,
 naam       Naam           not null,
 geslacht   Geslacht       not null,
 constraint    pk_auteur  primary key(nr)
);

create sequence s_auteur;

commit;

set term ^;
create trigger t_Auteur_bi 
for Auteur active before insert position 0
as 
begin
  if (new.nr is null) then 
  begin
       new.nr = gen_id(s_auteur, 1);
  end   
end^
set term ;^


commit;

create table Genre
(code            Genrecode            not null,
 omschrijving    Genreomschrijving    not null,
 constraint pk_genre primary key (code)
);

create table Boek
(nr             Boeknr        generated by default as identity primary key,
 auteur         Auteurnr      not null,
 titel          Boektitel     not null,
 prijs          Bedrag        not null,
 verzendkosten  Bedrag        not null,
 genre          Genrecode     not null,
 constraint fk_boek_van_auteur foreign key (auteur) references Auteur (nr)
   on update cascade,
 constraint fk_boek_in_genre foreign key (genre) references Genre (code)
   on update cascade
);

create table Lid
(nr                Lidnr       not null,
 aanbrenger        Lidnr,
 naam              Naam        not null,
 inschrijfdatum    Datum       not null,
 uitschrijfdatum   Datum,
 geslacht          Geslacht    not null,
 geboortedatum     Datum       not null,
 constraint pk_lid primary key (nr),
 constraint un_lidnaam unique (naam),
 constraint ch_uitNaIn check (uitschrijfdatum >= inschrijfdatum)
);

alter table Lid
add constraint fk_aanbrenger_van_lid foreign key (aanbrenger) references Lid (nr)
  on update cascade;
  
create table Bestelling
(nr       Bestelnr     generated by default as identity primary key,
 lid      Lidnr        not null,
 datum    Datum        not null,
 constraint fk_bestelling_van_lid foreign key (lid) references Lid (nr)
   on update cascade   
);


                
create table Bestelregel
(bestelling    Bestelnr      not null,
 volgnr        Volgnr        not null,
 boek          Boeknr        not null,
 aantal        Aantal        not null,
 constraint pk_bestelregel primary key (bestelling, volgnr),
 constraint un_bestelling_boek unique(bestelling, boek),
 constraint fk_bestelregel_bij_bestelling foreign key (bestelling) references Bestelling (nr)
   on update cascade on delete cascade,
 constraint fk_bestelregel_boek foreign key (boek) references Boek (nr)
   on update cascade
);

commit;

alter table Bestelling add totaalbedrag 
  computed by ( ( select sum(R.aantal*Bk.prijs+Bk.verzendkosten) 
                from BestelRegel R 
                join Boek Bk on R.boek = Bk.nr
                where R.bestelling = Bestelling.nr   ) );
                
commit;

create view vNogNietBesteld(nr,naam,inschrijfdatum,geslacht,geboortedatum)
as select nr,naam,inschrijfdatum,geslacht,geboortedatum from Lid
   where uitschrijfdatum is null
   and nr not in (
   select lid 
   from Bestelling
   where datediff(month from datum  to cast('Now'as date)) >= 9);
   
commit;